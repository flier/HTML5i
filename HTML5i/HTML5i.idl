// HTML5i.idl : IDL source for HTML5i
//

// This file will be processed by the MIDL tool to
// produce the type library (HTML5i.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
import "mshtml.idl";

typedef unsigned long  GLenum;
typedef boolean        GLboolean;
typedef unsigned long  GLbitfield;
typedef byte           GLbyte;         /* 'byte' should be a signed 8 bit type. */
typedef short          GLshort;
typedef long           GLint;
typedef long           GLsizei;
typedef long long      GLintptr;
typedef long long      GLsizeiptr;
typedef char           GLubyte;        /* 'unsigned byte' should be an unsigned 8 bit type. */
typedef unsigned short GLushort;
typedef unsigned long  GLuint;
typedef float          GLfloat;
typedef float          GLclampf; 

[
  object,
  uuid(9B84976E-5DA4-466A-807F-367A6026757A),
  dual,
  nonextensible,
  pointer_default(unique)
]
interface IHtml5Ext : IDispatch{
};

[
  oleautomation,
  dual,
  uuid(34588a84-5107-4ff6-9063-373fbe4f97fb)
]
interface ICanvasGradient : IDispatch {
  // opaque object
  HRESULT addColorStop([in] double offset, [in] BSTR color);
};

[
  oleautomation,
  dual,
  uuid(d9dd6b68-6f35-4c47-938a-489715623ddc)
]
interface ICanvasPattern : IDispatch {
  // opaque object
};

[
  oleautomation,
  dual,
  uuid(fef84bb3-56b4-4727-beeb-9b00b7c1e09e)
]
interface ITextMetrics : IDispatch {
  [propget] HRESULT width([out, retval] double *width);
};

[
  oleautomation,
  dual,
  uuid(13c542cf-240d-4ad9-ba57-86cda4793920)
]
interface ICanvasPixelArray : IDispatch {
  [propget] HRESULT length([out, retval] unsigned long *length);
  [propget] HRESULT octet ([in] unsigned long index, [out, retval] int *value);
  [propput] HRESULT octet ([in] unsigned long index, [in] int value);
};

[
  oleautomation,
  dual,
  uuid(947a0d1c-d551-42f8-bbbd-48a93e97f97b)
]
interface IImageData : IDispatch {
  [propget] HRESULT width([out, retval] unsigned long *width);
  [propget] HRESULT height([out, retval] unsigned long *height);
  [propget] HRESULT data([out, retval] ICanvasPixelArray **height);
};

interface CanvasRenderingContext2D;

[
  oleautomation,
  dual,
  uuid(a7ef5435-ab8e-4b36-b648-b2e023737406)
]
interface IHTMLCanvasElement : IHTMLElement {
  [propget] HRESULT width([out, retval] unsigned long *width);
  [propput] HRESULT width([in] unsigned long width);
  [propget] HRESULT height([out, retval] unsigned long *height);
  [propput] HRESULT height([in] unsigned long height);

  [vararg] HRESULT toDataURL([in] SAFEARRAY(VARIANT) args,
                             [out, retval] BSTR *url);
  [vararg] HRESULT getContext([in] BSTR contextId, 
                              [in] SAFEARRAY(VARIANT) args,
                              [out, retval] CanvasRenderingContext2D ** context);
}

[
  object,
  uuid(460266e0-d0fe-421f-a669-42e6dbc90b89),
  dual,
  nonextensible,
  pointer_default(unique)
]
interface CanvasRenderingContext2D : IDispatch {
  [propget] HRESULT canvas([out, retval] IHTMLCanvasElement **canvas);
};
[
  object,
  uuid(25EC7740-2D4E-4304-A690-719E61E18386),
  dual,
  nonextensible,
  pointer_default(unique)
]
interface IContext2D : CanvasRenderingContext2D {
};
[
  object,
  uuid(d09f39b0-9ad6-4fdc-af56-6c8c2a4caa5c),
  dual,
  nonextensible,
  pointer_default(unique)
]
interface WebGLRenderingContext : IDispatch {

};
[
  object,
  uuid(A63CCF94-3378-477F-94AF-71A30FB922AE),
  dual,
  nonextensible,
  pointer_default(unique)
]
interface IContextWebGL : WebGLRenderingContext {
};
[
  oleautomation,
  dual,
  uuid(A2AC0F60-EF8D-4F99-B882-B3B1C95F2AE7)
]
interface IDispExSinkConnector : IDispatch {
  [propget] HRESULT target([out, retval] IDispatchEx **target);
  [propput] HRESULT target([in] IDispatchEx *target);

  [propget] HRESULT enabled([out, retval] boolean *enabled);
  [propput] HRESULT enabled([in] boolean enabled);

  HRESULT AddNamedObject([in] BSTR bstrName, [in] IDispatch *pDisp);
  HRESULT RemoveNamedObject([in] BSTR bstrName);

  HRESULT AddTypeLib([in] REFGUID guidTypeLib, 
    [in, defaultvalue(1)] WORD wMajorVer, 
    [in, defaultvalue(0)] WORD wMinorVer);

  HRESULT ConnectObject([in] IUnknown *pUnk, [in] BSTR bstrPrefix, 
    [in] REFGUID piid, [in] REFGUID plibid, 
    [in, defaultvalue(1)] WORD wMajorVer, 
    [in, defaultvalue(0)] WORD wMinorVer);
  HRESULT DisconnectObject([in] IUnknown *pUnk, [in] REFGUID piid);
};
[
  uuid(A4D1951D-9150-4F60-B5E7-75FCAC9D0A54),
  version(1.0),
]
library HTML5iLib
{
  importlib("stdole2.tlb");
  [
    uuid(275DF25D-C09D-43C8-90D7-9348D6059563)		
  ]
  coclass Html5Ext
  {
    [default] interface IHtml5Ext;
  };
  [
    uuid(EF8B2E99-D76F-4F77-9E2E-CCDED21AF989)		
  ]
  dispinterface _IContext2DEvents
  {
    properties:
    methods:
  };
  [
    uuid(A2B02C23-5C77-44B3-B6FE-12BC43AA13D2)		
  ]
  coclass Context2D
  {
    [default] interface IContext2D;
    [default, source] dispinterface _IContext2DEvents;
  };
  [
    uuid(F5B00BA8-F210-4B70-B2BC-C8EB5B3FDCC9)		
  ]
  dispinterface _IContextWebGLEvents
  {
    properties:
    methods:
  };
  [
    uuid(801ADD56-023A-41CD-9555-D6156A23D1CB)		
  ]
  coclass ContextWebGL
  {
    [default] interface IContextWebGL;
    [default, source] dispinterface _IContextWebGLEvents;
  };
  [
    uuid(3D5B1520-D5EC-458B-97DC-8E31B30B071F)		
  ]
  coclass DispExSinkConnector
  {
    [default] interface IDispExSinkConnector;
  };
};

